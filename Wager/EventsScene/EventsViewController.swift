//
//  EventsViewController.swift
//  Wager
//
//  Created by Emrecan OZTURK on 31.03.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EventsDisplayLogic: AnyObject {
    func displaySports(viewModel: Events.Models.ViewModel)
    func displayFailure(message: String)
}

class EventsViewController: UIViewController, EventsDisplayLogic, UISearchResultsUpdating {
    
    var interactor: EventsBusinessLogic?
    var router: (NSObjectProtocol & EventsRoutingLogic & EventsDataPassing)?
    
    @IBOutlet weak var tableView: UITableView!
    
    let searchController = UISearchController(searchResultsController: nil)
    var model: [SportsModel]?
    var searchResults : [SportsModel] = []
    
    var tableViewDataSource: EventsTableViewDataSource!
    var tableViewDelegate: EventsTableViewDelegate!

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = EventsInteractor()
        let presenter = EventsPresenter()
        let router = EventsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        tableViewSetup()
        getEvents()
    }
    
    func setupNavigationBar() {
        
        title = "EVENTS"
        searchController.searchResultsUpdater = self
        definesPresentationContext = true

        // Place the search bar in the navigation item
        navigationItem.searchController = searchController

        // Don't hide the navigation bar because the search bar is in it.
        searchController.hidesNavigationBarDuringPresentation = false
    }
    
    func tableViewSetup() {
        tableViewDataSource = EventsTableViewDataSource(tableView: tableView)
        tableViewDelegate = EventsTableViewDelegate()
        tableViewDelegate.presentingController = self
        tableView.dataSource = tableViewDataSource
        tableView.delegate = tableViewDelegate
    }
  
    // MARK: Get events
  
    //@IBOutlet weak var nameTextField: UITextField!
  
    private func getEvents() {
        let request = Events.Models.Request()
        interactor?.getSports(request: request)
    }
  
    func displaySports(viewModel: Events.Models.ViewModel) {
        model = viewModel.model ?? []
        guard let foo = viewModel.model else { return }
        tableViewDataSource.events = foo
        tableView.reloadData()
    }
    
    func displayFailure(message: String) {
        showAlert(withTitle: "Sorry...", withMessage: message)
    }
    
    func filterContent(for searchText: String) {
        // Update the searchResults array with matches
        // in our entries based on the title value.
        searchResults = (model?.filter({ (sport) -> Bool in
            return ((sport.title?.range(of: searchText, options: .caseInsensitive)) != nil) || ((sport.description?.range(of: searchText, options: .caseInsensitive)) != nil) || ((sport.group?.range(of: searchText, options: .caseInsensitive)) != nil)
        })) ?? []
    }
    
    func updateSearchResults(for searchController: UISearchController) {
        // If the search bar contains text, filter our data with the string
        if let searchText = searchController.searchBar.text {
            filterContent(for: searchText)
            tableViewDataSource.events = searchText == "" ? model : searchResults
            // Reload the table view with the search result data.
            tableView.reloadData()
        }
    }
}

extension EventsViewController: EventsPresenting {
    
    func currentSelected(_ index: Int) {
        print(index)
    }
    
    func willDisplayCell(_ index: Int) {
        print(index)
    }
}
